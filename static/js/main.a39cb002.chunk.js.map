{"version":3,"sources":["actions.js","toDoItem.js","toDoList.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["toggleTodo","todoIdToToggle","type","payload","TodoItem","className","this","props","completed","checked","onChange","event","handleToggleComplete","id","title","onClick","handleDeleteTodo","Component","TodoList","todos","map","todo","key","deleteTodo","mapDispatchToProps","todoToDelete","connect","App","state","todosList","handleRemoveChecked","clearCompletedTodos","handleCreateTodo","addTodo","target","value","filter","length","placeholder","onKeyDown","autoFocus","exact","path","render","handleItemsLeft","to","activeClassName","todoTitle","userId","Math","round","random","Boolean","window","location","hostname","match","initialState","reducer","action","newTodoArray","slice","push","newTodos","moreNewTodos","filteredArray","checkedToRemove","store","createStore","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a39cb002.chunk.js","sourcesContent":["export const ADD_TODO= \"ADD_TODO\"\nexport const TOGGLE_TODO= \"TOGGLE_TODO\"\nexport const DELETE_TODO= \"DELETE_TODO\"\nexport const CLEAR_COMPLETED_TODOS= \"CLEAR_COMPLETED_TODOS\"\nexport const addTodo = (todoTitle) => {\n    const newTodo = {\n        userId: 1,\n        id: Math.round(Math.random() * 10000000),\n        title: todoTitle,\n        completed: false\n      };\n    return {\n        type: ADD_TODO,\n        payload: newTodo\n    }\n}\n\nexport const toggleTodo = (todoIdToToggle) => {\n    return {\n        type: TOGGLE_TODO,\n        payload: todoIdToToggle\n    }\n}\n\nexport const deleteTodo = (todoToDelete) => {\n    return {\n        type: DELETE_TODO,\n        payload: todoToDelete\n    }\n}\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    }\n}\n","import React, { Component } from 'react';\nclass TodoItem extends Component {\n  \n    render() {\n      return (\n        <li className={this.props.completed ? \"completed\" : \"\"}>\n          <div className=\"view\">\n            <input\n              className=\"toggle\"\n              type=\"checkbox\"\n              checked={this.props.completed}\n              onChange={event =>\n                this.props.handleToggleComplete(event, this.props.id)\n              }\n            />\n            <label>{this.props.title}</label>\n            <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n          </div>\n        </li>\n      );\n    }\n  }\n  export default TodoItem","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteTodo, toggleTodo } from \"./actions\";\nimport TodoItem from \"./toDoItem.js\";\nclass TodoList extends Component {\n\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {this.props.todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              title={todo.title}\n              completed={todo.completed}\n              id={todo.id}\n              handleToggleComplete={event => this.props.toggleTodo(todo.id)}\n              handleDeleteTodo={event =>\n                this.props.deleteTodo(todo.id)\n              }\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\nconst mapDispatchToProps = {\n  deleteTodo,\n  toggleTodo\n};\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\nimport { Route, NavLink } from \"react-router-dom\";\nimport TodoList from \"./toDoList.js\";\nimport { connect } from \"react-redux\";\nimport {\n  addTodo,\n  clearCompletedTodos,\n  toggleTodo\n} from \"./actions\";\n\nclass App extends Component {\n  state = {\n    todos: todosList\n  };\n  handleRemoveChecked = event => {\n    this.props.clearCompletedTodos();\n  };\n  handleToggleComplete = (event, todoIdToToggle) => {\n    this.props.toggleTodo();\n  };\n  handleCreateTodo = event => {\n    if (event.key === \"Enter\") {\n      this.props.addTodo(event.target.value);\n      event.target.value = \"\";\n    }\n  };\n  handleItemsLeft() {\n    let itemsLeftArray = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    return itemsLeftArray.length;\n  }\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyDown={this.handleCreateTodo}\n            autoFocus\n          />\n        </header>\n        <Route exact path=\"/\">\n          <TodoList todos={this.props.todos} />\n        </Route>\n        <Route\n          exact\n          path=\"/active\"\n          render={() => (\n            <TodoList\n              todos={this.props.todos.filter(todo => todo.completed === false)}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/completed\"\n          render={() => (\n            <TodoList\n              todos={this.props.todos.filter(todo => {\n                if (todo.completed === false) {\n                  return false;\n                }\n                return true;\n              })}\n            />\n          )}\n        />\n        <footer className=\"footer\">\n          {/* <!-- This should be `0 items left` by default --> */}\n          <span className=\"todo-count\">\n            <strong>{this.handleItemsLeft()}</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <NavLink exact to=\"/\" activeClassName=\"selected\">\n                All\n              </NavLink>\n            </li>\n            <li>\n              <NavLink activeClassName=\"selected\" to=\"/active\">\n                Active\n              </NavLink>\n            </li>\n            <li>\n              <NavLink activeClassName=\"selected\" to=\"/completed\">\n                Completed\n              </NavLink>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={this.handleRemoveChecked}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\nconst mapDispatchToProps = {\n  addTodo,\n  clearCompletedTodos,\n  toggleTodo\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import todosList from \"./todos.json\";\nimport {\n    ADD_TODO,\n    TOGGLE_TODO,\n    DELETE_TODO,\n    CLEAR_COMPLETED_TODOS\n} from \"./actions\";\n\n\nconst initialState = {\n    todos: todosList\n};\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO: {\n            const newTodoArray = state.todos.slice();\n            newTodoArray.push(action.payload);\n            return { todos: newTodoArray };\n        }\n        case TOGGLE_TODO: {\n            const newTodos = state.todos.slice();\n            const moreNewTodos = newTodos.map(todo => {\n                if (todo.id === action.payload) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            });\n            return { todos: moreNewTodos }\n        }\n        case DELETE_TODO: {\n            const filteredArray = state.todos.filter(todo => {\n                if (todo.id === action.payload) {\n                    return false;\n                }\n                return true;\n            });\n            return { todos: filteredArray };\n        }\n        case CLEAR_COMPLETED_TODOS: {\n            const checkedToRemove = state.todos.filter(todo => {\n                if (todo.completed === true) {\n                    return false;\n                }\n                return true;\n            });\n            return { todos: checkedToRemove };\n        }\n        default:\n            return state;\n    }\n};\nexport default reducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport reducer from \"./reducer\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\n\nconst store=createStore(reducer)\n\nReactDOM.render(<Provider store={store}><BrowserRouter basename = {process.env.PUBLIC_URL}><App /></BrowserRouter></Provider>, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}